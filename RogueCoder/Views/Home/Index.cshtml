@{
    ViewBag.Title = "Rogue Coder";
}
<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/jquery-ui-1.9.2.js"></script>

<div id="canvasContainer">
    <canvas  height="500" width="500" id="canvas" class="canvas" ></canvas>
</div>
<div id ="message" style="position:absolute;top:420px;left:0px" ></div>
<div id ="display" style="position:absolute;top:450px;left:0px" ></div>
<div id ="serverprocessingdisplay" class="serverprocessingdisplay"  >Syncing with game server...</div>

<div id="dialog" class="IntroGameDiv">
    <div id ="titleDiv"class="titleDiv" >
        Rogue Coder
    </div>
        <div id="caption">
         @RogueCoder.GameResource.IntroGameText
        </div>

        <div>
        <input type="button" value="Continue" onclick="$('#dialog').hide(1000);" />
        </div> 
</div>
<div id="gameWinScreen" class="GameOverDiv">
    <div>
          @RogueCoder.GameResource.GameWinText
    </div>
    <div style="position:absolute;vertical-align:bottom">   
        <input type="button" value="OK" onclick="location.reload(true);" />
    </div> 
</div>
<div id="gameLooseScreen" class="GameOverDiv">
    <div id="gameLooseText">
         @RogueCoder.GameResource.GameLooseText
    </div>
    <div style="position:absolute;vertical-align:bottom;z-index:50">   
        <input type="button" value="Start again" onclick="location.reload(true);" />
    </div> 
</div>
<div id="HowToPlayDiv" class="HowToPlayDiv">
    <div>
        @RogueCoder.GameResource.HelpText
    </div>
    <div style="position:absolute;vertical-align:bottom">
        <input type="button" value="Close" onclick="$('#HowToPlayDiv').hide(1000);" />
    </div> 
</div>
<div id="AboutDiv" class="HowToPlayDiv">
    <div>
        @RogueCoder.GameResource.About
    </div>
    <div style="position:absolute;vertical-align:bottom">
        <input type="button" value="Close" onclick="$('#AboutDiv').hide(1000);" />
    </div> 
</div>
<div id="DiceDiv" class="DiceDiv">
    <input id="Laptop" type="button" value="Laptop"/>"
</div>
<div id="GameDiv" class="GameDiv" >
</div>
<div id="ComputerScreenContainerDiv" class="ComputerScreenContainerDiv"  >
    <textarea id="ComputerScreenDiv" class="ComputerScreenDiv" >
--connect light 123;
--execute light off;
loop 100;
ifconnectdisplay light loopcount;
loopend;

    </textarea>xs

    <input type="button" name="btnClose" value="x"  id="btnClose" class="btnClose" onclick="$('#ComputerScreenContainerDiv').hide();"/>
    <input type="button" name="btnRun" value="RUN"  id="btnRun" class="btnRun"/>

</div>
<div id="ConversationTextDiv" class="ConversationTextDiv">
    <div id="ConversationText">
    </div>
    <input type="button" onclick="$('#ConversationTextDiv').hide();" value="x" />
</div>
<div id ="menu" class="menu"  >
      <input type="button" value="?" onclick="$('#HowToPlayDiv').show(1000);" />
     <input type="button" value="About" onclick="$('#AboutDiv').show(1000);" />
</div>
<div id ="debug" class="debug"  >
     
</div>
<script type="text/javascript">
    $(document).ready(function () {

        var IsServerProcessing = false;
        var clickCount = 0;
        var gameData;                           //Each level tile array
        var gameLevelData;                      //Class representing whol level
        
        var displayMessage = new String();
        var playerObject = null;
        var playerMoveDistance = 5;             //how far the player char can move a turn (px)
        var levelWidth = 500;                   //width of level in (px)
        var levelHeight = 500;                  //height of level in (px)
        var imageHeight = 20;                   //tile image height (px)
        var imageWidth = 20;                    //tile image width (px)
        var intersectionRange = 10;             //intersection with an object is  plus or minus this
        var mouseDownXoffSet = 8;               //offset required to get an accurate X co-ord relative to the CANVAS
        var mouseDownYoffSet = 9;               //offset required to get an accurate Yco-ord relative to the CANVAS
        var SyncTurns = 10;                     //rounds before a sync occurs
        var currentDice = 4;                    //workaround for server probs
        var maxDice = 4;                        //workaround for server probs
        var playerLives = 8;                    //workaround for server probs

        $('#AboutDiv').hide();
        $('#HowToPlayDiv').hide();
        $('#BugsDiv').hide();
        $('#gameLooseScreen').hide();
        $('#gameWinScreen').hide();
        $('#DiceDiv').hide();
        $('#ComputerScreenContainerDiv').hide();
        $('#ConversationTextDiv').hide();

        $('#btnRun').click(function () {
            runCode();
        });

        var drawScreen = function () {
            $('#GameDiv').show();
            $('#DiceDiv').show();
            var loadedImages = 0;
            var images = [];
            var ctx = document.getElementById('canvas').getContext('2d');
            ctx.fillStyle = "rgba(0,0,0,1)";
            ctx.fillRect(0, 0, levelHeight, levelWidth);
            var draw = function () {
                for (i = 0; i < gameData.length-1; i++) {
                    var item = gameData[i];
                    if (gameData[i].visible)
                        ctx.drawImage(images[i], item.col, item.row, imageWidth, imageHeight);
                };
            };

            if (gameData != null && gameData.length > 0) {
                if (gameLevelData.Lights == false) {
                    return;
                }

                for (i = 0; i < gameData.length-1; i++) {
                    var image = new Image();
                    var item = gameData[i];
                    image.addEventListener("load", function () {
                        loadedImages++;
                        if (loadedImages == gameData.length-1) {
                            draw();
                        }
                    }, false);
                    image.src = item.FileName;
                    images.push(image);
                }
            }
        };

        var runCode = function () {
            var codeString = new String();
            codeString = $('#ComputerScreenDiv').val();
            var commandObject = { level: gameData,code : codeString  };
            callServer(null, '@Url.Action("RunCode","Home")', processRunCode, commandObject);
        };

        var handleError = function (e) {
            alert(e);
        };

        var endGame = function (reason) {
            $('#gameLooseText').text(reason);
            callServer(null, '@Url.Action("ProcessEndGame","Home")', processEndGame, null)
        };

        var processSyncData = function (data) {
            gameData = data.Level;
            gameLevelData = data;
            $('#serverprocessingdisplay').hide(1000);
            $('#GameDiv').text("Welcome to level " + data.CurrentLevel + " Your weapon dice is D" + currentDice);
            IsServerProcessing = false;
            drawScreen();
        };

        var processPing = function () {

            $('#serverprocessingdisplay').hide(1000);
            $('#GameDiv').text("Ping ok");
        }

        var processRunCode = function (data) {
            gameData = data.Level;
            gameLevelData = data;
            $('#serverprocessingdisplay').hide(1000);
            IsServerProcessing = false;
            $('#ComputerScreenContainerDiv').hide();
            $('#GameDiv').text("Code has been run: "+gameLevelData.Output);
            drawScreen();
        };

        //SYNC PROCESS SERVER RESPONSE METHOD
        var processLooseGame = function (data) {
            $('#serverprocessingdisplay').hide(1000);
            $('#gameLooseScreen').show(1000);
        };

        //SYNC PROCESS SERVER RESPONSE METHOD
        var processWinGame = function (data) {
            $('#serverprocessingdisplay').hide(1000);
            $('#gameWinScreen').show(1000);
        };

        var callServer = function (id, route, successFunction, commandObject) {
            $('#serverprocessingdisplay').show(10);
            IsServerProcessing = true;
            $.ajax({
                type: "POST",
                url: route,
                data: JSON.stringify(commandObject),
                dataType: "json",
                contentType: 'application/json',
                success: successFunction,
                error: function (e) { handleError(e);}});
        };

        var getObjectByID = function (id) {
            for (var i = 0; i < gameData.length - 1; i++) {
                if (gameData[i].ID == id)
                    return gameData[i];
            }
            return null;
        };

        var getObjectByCoords = function (x, y) {
            for (var i = 0; i < gameData.length; i++) {
                if (gameData[i].col == x && gameData[i].row == y)
                    return gameData[i];
            }
            return null;
        };

        var checkForLaptop = function () {
            //Check if its a laptop
            if (intersect(gameData[0].col, gameData[0].row, gameData[1].col, gameData[1].row)) {
                gameData[0].HasLaptop = true;
                if (currentDice > maxDice)
                    maxDice = currentDice;
                displayMessage = "Pickup Dice D" + currentDice;
                gameData[1].visible = false;
            }
        };

        //KEYBOARD HANDLER
        var getKeyBoardAction = function (evt) {
            var playerSpaceShip = gameData[0];
            switch (evt.keyCode) {
                case 70:
                    //f
                    break;
                case 71:
                    //g
                    break;
                case 65:
                    if (playerSpaceShip.col - playerMoveDistance >= 0 )
                    {
                        var newCol = gameData[0].col - playerMoveDistance;
                        if (!CanMove(newCol, gameData[0].row,0))
                            gameData[0].col -= playerMoveDistance;
                            checkForLaptop();
                    }
                    break;
                case 87://n
                    if (playerSpaceShip.row - playerMoveDistance >= 0) {
                        var newRow = gameData[0].row - playerMoveDistance;
                        if (!CanMove(gameData[0].col, newRow,0))
                            gameData[0].row -= playerMoveDistance;
                        checkForLaptop();
                             }
                    break;
                case 83://e
                    if (playerSpaceShip.col + playerMoveDistance < levelWidth) {
                        var newCol = gameData[0].col + playerMoveDistance;
                        if (!CanMove(newCol, gameData[0].row,0) ||
                            intersect(newCol, gameData[0].row, gameData[2].col, gameData[2].row))
                            {
                                gameData[0].col += playerMoveDistance;
                                checkForLaptop();
                            }
                        //check for easterly access to steps
                        if (intersect(gameData[0].col, gameData[0].row, gameData[2].col, gameData[2].row))
                            {
                            var commandObject = { level: gameData };
                            callServer(null, '@Url.Action("NewLevel","Home")', processSyncData, commandObject);
                            }
                            
                    }
                    break;
                case 90://s
                    if (playerSpaceShip.row + playerMoveDistance < levelWidth - 20) {
                        var newRow = gameData[0].row + playerMoveDistance;
                        if (!CanMove(gameData[0].col, newRow,0))
                            gameData[0].row += playerMoveDistance;
                            checkForLaptop();
                    }
                    break;
                case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
                    //numerics 0-9
                    break;
                default:
                    break;
            }
        };

        var moveToObject = function (x,y,targetX, targetY,blocked) {
            var moveObject = new Object();
            moveObject.row = y;
            moveObject.col = x;
            //var moved = false;
            if (x - targetX != 0) {
                //moved = true;
                if (x - targetX > 0)
                    moveObject.col = x - playerMoveDistance;
                else
                    moveObject.col = x + playerMoveDistance;
            }
            else {
                if (y - targetY > 0)
                    moveObject.row = y - playerMoveDistance;
                else
                    moveObject.row = y + playerMoveDistance;
            }
            return moveObject;
        }

        var takeComputerActions = function () {
            for (var i = 1; i < gameData.length; i++) {
      
                if (gameData[i].canMove && gameLevelData.Lights == true) {
                    var tempMoveObject = moveToObject(gameData[i].col,gameData[i].row, 
                                                      gameData[0].col,gameData[0].row,
                                                      gameData[i].blocked);

                    if (!CanMove(tempMoveObject.col, tempMoveObject.row, i)) {
                        gameData[i].row = tempMoveObject.row;
                        gameData[i].col = tempMoveObject.col;
                    }
                    else {
                        //You roll and he rolls
                        var playerRoll = Math.round(Math.random() * currentDice);
                        if (playerRoll == currentDice) {
                            playerRoll += Math.round(Math.random() * currentDice);
                        }
                        var monsterRoll = Math.round(Math.random() * 6);
                        var killMessage, rollMessage;

                        rollMessage = "You rolled a " + playerRoll + " He rolled a " + monsterRoll;
                        if (playerRoll >= monsterRoll) {
                            killMessage = " You killed the " + gameData[i].Description;
                            gameData[i].visible = false;
                            gameData[i].canMove = false;
                            //TODO CHANGE THE BOSS KILL GAME OVER STATE
                            if (gameData[i].Description == "Dragon") {
                                callServer(null, '@Url.Action("EndGame","Home")', processWinGame, null);                            }

                        }
                        else {
                            playerLives = playerLives - 1;
                            killMessage = " You have lost 1 life," + playerLives + " remaining";
                        }

                        displayMessage = rollMessage + killMessage;
                            
                        if (playerLives <=0) {
                            callServer(null, '@Url.Action("EndGame","Home")', processLooseGame, null); 
                        }
                    }
                }
            }
        }

        var doKeyDown = function (evt) {
            if (!IsServerProcessing) {
                var command = new String();
                var isGameOver = false;

                //Player Actions
                getKeyBoardAction(evt);

                //AI 
                takeComputerActions();
                
                $('#GameDiv').text(displayMessage);
                displayMessage = "";
                //Now draw screen
                drawScreen();

            }
        };


        var intersect = function (firstX, firstY, secondX, secondY) {
            if (firstX == secondX && firstY == secondY)
                return true;

            if ((Math.abs(firstX - secondX) <= intersectionRange) && (Math.abs(firstY - secondY) <= intersectionRange))
                return true;

            return false;
        };

        var CanMove = function (firstX, firstY,index) {
           
            var startIndex = (index == 0)?1:0; 
            for(var i=startIndex; i<gameData.length;i++)
            {
                var obj = gameData[i];
                if (obj != null && obj .visible && i != index && intersect(obj.col, obj.row, firstX, firstY) && (obj.canMove == true || 
                    (obj.Description =="Wall" || obj.Description == "Door" ))) {
                    return true;
                }
                if (index == 0 && obj != null && obj.visible && i != index && intersect(obj.col, obj.row, firstX, firstY)
                    && obj.canMove == false && obj.ID == 999) {
                    $("#ConversationText").text(obj.directionImage[0]);
                    $("#ConversationTextDiv").show();
                    return true;
                }
            }
           
           
            return false;
        };

        var action = "";
        window.addEventListener('keydown', doKeyDown, true);


        $("#canvas").mousedown(function (e) {
            var fixedX = e.clientX - mouseDownXoffSet;
            var fixedY = e.clientY - mouseDownYoffSet;
            var collision = false;
            //determine any intersections
            for (var i = 0; i < gameData.length; i++) {
                if (intersect(gameData[i].col, gameData[i].row, fixedX, fixedY)) {
                    $("#GameDiv").text(gameData[i].Description);
                    collision = true;
                }
            }
            if (!collision) {

                $("#GameDiv").text("");
            }

        });

        $("#DiceDiv :input").click(function (e) {
            
            if (gameData[0].HasLaptop) {
                $('#ComputerScreenContainerDiv').show();
                $("#GameDiv").text("Showing laptop... ");
            }
            else {
                $("#GameDiv").text("You dont have a laptop");
            }


        });
        commandObject = { map: gameData };

        callServer(null, '@Url.Action("Sync","Home")', processSyncData, commandObject);


    });
</script>

